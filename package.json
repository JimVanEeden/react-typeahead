{
  "name": "react-typeahead",
  "version": "1.1.4",
  "description": "React-based typeahead and typeahead-tokenizer",
  "keywords": [
    "react",
    "typeahead",
    "tokenizer",
    "autocomplete",
    "react-component"
  ],
  "homepage": "https://github.com/fmoo/react-typeahead",
  "bugs": {
    "url": "https://github.com/fmoo/react-typeahead/issues",
    "email": "ruibalp@gmail.com"
  },
  "license": "ISC",
  "author": {
    "name": "Peter Ruibal",
    "email": "ruibalp@gmail.com",
    "url": "https://github.com/fmoo"
  },
  "contributors": [
    {
      "name": "Sam Breed",
      "email": "sam@quickleft.com",
      "url": "http://wookiehangover.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/JimVanEeden/react-typeahead.git"
  },
  "dependencies": {
    "rfc822-validate": "^1.0.0",
    "classnames": "^1.2.0",
    "fuzzy": "^0.1.0"
  },
  "peerDependencies": {
    "react": ">= 0.13.0",
    "jquery": "^2.1.4"
  },
  "browserify": {
    "transform": [
      ["babelify", { "optional": [ "es7.objectRestSpread"] }],
      "browserify-shim"
    ]
  },
  "browserify-shim": {
    "react": "global:React"
  },
  "main": "lib/react-typeahead.js",
  "devDependencies": {
    "browserify": "^8.0.2",
    "chai": "^1.9.1",
    "es5-shim": "^4.0.1",
    "gulp": "^3.8.7",
    "gulp-mocha-phantomjs": "^0.8.1",
    "gulp-react": "^3.0.1",
    "literalify": "^0.4.0",
    "lodash": "^2.4.1",
    "mocha": "^1.21.4",
    "react-tools": "^0.13.0",
    "reactify": "^1.0.0",
    "sinon": "^1.10.3",
    "watchify": "^2.2.1"
  },
  "scripts": {
    "test": "npm run build-test && gulp test",
    "watchify-test": "watchify test/main.js -t reactify -o test/bundle.js -v",
    "build-test": "browserify test/main.js -t reactify -o test/bundle.js",
    "build": "browserify ./src/react-typeahead.js -t reactify -t literalify -x react -s ReactTypeahead -o ./dist/react-typeahead.js",
    "watchify": "watchify ./src/react-typeahead.js -t reactify -t literalify -x react -s ReactTypeahead -o ./dist/react-typeahead.js",
    "lib": "gulp build",
    "prepublish": "npm run lib"
  },
  "literalify": {
    "react": "window.React || require('react')"
  },
  "gitHead": "58f02e65cb40005e71b1d26f7a8b5f041fd4e011",
  "readme": "# react-typeahead\n\n> A typeahead/autocomplete component for React\n\nreact-typeahead is a javascript library that provides a react-based\ntypeahead, or autocomplete text entry, as well as a \"typeahead tokenizer\",\na typeahead that allows you to select multiple results.\n\n## Usage\n\nFor a typeahead input:\n\n```javascript\nvar Typeahead = require('react-typeahead').Typeahead;\nReact.render(\n  <Typeahead\n    options={['John', 'Paul', 'George', 'Ringo']}\n    maxVisible={2}\n  />\n);\n```\n\nFor a tokenizer typeahead input:\n\n```javascript\nvar Tokenizer = require('react-typeahead').Tokenizer;\nReact.render(\n  <Tokenizer\n    options={['John', 'Paul', 'George', 'Ringo']}\n    onTokenAdd={function(token) {\n      console.log('token added: ', token);\n    }}\n  />\n);\n```\n\n## Examples\n\n* [Basic Typeahead with Topcoat][1]\n* [Typeahead Tokenizer with Topcoat][2]\n* [Typeahead Tokenizer with simple styling][3]\n\n![](https://i.cloudup.com/CeLPJjWvFK.gif)\n\n[1]: http://wookiehangover.github.com/react-typeahead/examples/typeahead-topcoat.html\n[2]: http://wookiehangover.github.com/react-typeahead/examples/tokenizer-topcoat.html\n[3]: http://wookiehangover.github.com/react-typeahead/examples/TypeaheadTokenizer-simple.html\n[4]: http://blog.npmjs.org/post/85484771375/how-to-install-npm\n\n## API\n\n### Typeahead(props)\n\nType: React Component\n\nBasic typeahead input and results list.\n\n#### props.options\n\nType: `Array`\nDefault: []\n\nAn array supplied to the filtering function. Can be a list of strings or a list of arbitrary objects. In the latter case, `filterOption` and `displayOption` should be provided.\n\n#### props.defaultValue\n\nType: `String`\n\nA default value used when the component has no value. If it matches any options a option list will show.\n\n#### props.value\n\nType: `String`\n\nSpecify a value for the text input.\n\n#### props.maxVisible\n\nType: `Number`\n\nLimit the number of options rendered in the results list.\n\n#### props.customClasses\n\nType: `Object`\nAllowed Keys: `input`, `results`, `listItem`, `listAnchor`, `hover`\n\nAn object containing custom class names for child elements. Useful for\nintegrating with 3rd party UI kits.\n\n#### props.placeholder\n\nType: `String`\n\nPlaceholder text for the typeahead input.\n\n#### props.textarea\n\nType: `Boolean`\n\nSet to `true` to use a `<textarea>` element rather than an `<input>` element\n\n#### props.inputProps\n\nType: `Object`\n\nProps to pass directly to the `<input>` element.\n\n#### props.onKeyDown\n\nType: `Function`\n\nEvent handler for the `keyDown` event on the typeahead input.\n\n#### props.onKeyUp\n\nType: `Function`\n\nEvent handler for the `keyUp` event on the typeahead input.\n\n#### props.onBlur\n\nType: `Function`\n\nEvent handler for the `blur` event on the typeahead input.\n\n#### props.onFocus\n\nType: `Function`\n\nEvent handler for the `focus` event on the typeahead input.\n\n#### props.onOptionSelected\n\nType: `Function`\n\nEvent handler triggered whenever a user picks an option.\n\n#### props.filterOption\n\nType: `String` or `Function`\n\nA function to filter the provided `options` based on the current input value. For each option, receives `(inputValue, option)`. If not supplied, defaults to [fuzzy string matching](https://github.com/mattyork/fuzzy).\n\nIf provided as a string, it will interpret it as a field name and fuzzy filter on that field of each option object.\n\n#### props.displayOption\n\nType: `String` or `Function`\n\nA function to map an option onto a string for display in the list. Receives `(option, index)` where index is relative to the results list, not all the options. Must return a string.\n\nIf provided as a string, it will interpret it as a field name and use that field from each option object.\n\n#### props.formInputOption\n\nType: `String` or `Function`\n\nA function to map an option onto a string to include in HTML forms (see `props.name`). Receives `(option)` as arguments. Must return a string.\n\nIf specified as a string, it will interpret it as a field name and use that field from each option object.\n\nIf not specified, it will fall back onto the semantics described in `props.displayOption`.\n\nThis option is ignored if you don't specify the `name` prop. It is required if you both specify the `name` prop and are using non-string options. It is optional otherwise.\n\n#### props.defaultClassNames\n\nType: `boolean`\nDefault: true\n\nIf false, the default classNames are removed from the typeahead.\n\n#### props.customListComponent\n\nType: `React Component`\n\nA React Component that renders the list of typeahead results. This replaces the default list of results.\n\nThis component receives the following props :\n\n##### Passed through\n\n- `props.displayOptions`\n- `props.customClasses`\n- `props.onOptionSelected`\n\n##### Created or modified\n- `props.options`\n  - This is the Typeahead's `props.options` filtered and limited to `Typeahead.props.maxVisible`.\n- `props.selectionIndex`\n  - The index of the highlighted option for rendering\n\n\n### Typeahead ([Exposed Component Functions][reactecf])\n\n#### typeahead.focus\n\nFocuses the typeahead input.\n\n---\n\n### Tokenizer(props)\n\nType: React Component\n\nTypeahead component that allows for multiple options to be selected.\n\n#### props.options\n\nType: `Array`\nDefault: []\n\nAn array supplied to the filter function.\n\n#### props.maxVisible\n\nType: `Number`\n\nLimit the number of options rendered in the results list.\n\n#### props.name\n\nType: `String`\n\nThe name for HTML forms to be used for submitting the tokens' values array.\n\n#### props.customClasses\n\nType: `Object`\nAllowed Keys: `input`, `results`, `listItem`, `listAnchor`, `typeahead`\n\nAn object containing custom class names for child elements. Useful for\nintegrating with 3rd party UI kits.\n\n#### props.placeholder\n\nType: `String`\n\nPlaceholder text for the typeahead input.\n\n#### props.inputProps\n\nType: `Object`\n\nProps to pass directly to the `<input>` element.\n\n#### props.onKeyDown\n\nType: `Function`\n\nEvent handler for the `keyDown` event on the typeahead input.\n\n#### props.onKeyUp\n\nType: `Function`\n\nEvent handler for the `keyUp` event on the typeahead input.\n\n#### props.onBlur\n\nType: `Function`\n\nEvent handler for the `blur` event on the typeahead input.\n\n#### props.onFocus\n\nType: `Function`\n\nEvent handler for the `focus` event on the typeahead input.\n\n#### props.defaultSelected\n\nType: `Array`\n\nA set of values of tokens to be loaded on first render.\n\n#### props.onTokenRemove\n\nType: `Function`\nParams: `(removedToken)`\n\nEvent handler triggered whenever a token is removed.\n\n#### props.onTokenAdd\n\nType: `Function`\nParams: `(addedToken)`\n\nEvent handler triggered whenever a token is removed.\n\n#### props.displayOption\n\nType: `String` or `Function`\n\nA function to map an option onto a string for display in the list. Receives `(option, index)` where index is relative to the results list, not all the options. Must return a string.\n\nIf provided as a string, it will interpret it as a field name and use that field from each option object.\n\n#### props.filterOption\n\nType: `Function`\n\nA function to filter the provided `options` based on the current input value. For each option, receives `(inputValue, option)`. If not supplied, defaults to [fuzzy string matching](https://github.com/mattyork/fuzzy).\n\n#### props.defaultClassNames\n\nType: `boolean`\nDefault: true\n\nIf false, the default classNames are removed from the tokenizer and the typeahead.\n\n### Tokenizer ([Exposed Component Functions][reactecf])\n\n#### tokenizer.focus\n\nFocuses the tokenizer input.\n\n#### tokenizer.getSelectedTokens\n\nType: `Function`\n\nA function to return the currently selected tokens.\n\n## Developing\n\n### Setting Up\n\nYou will need `npm` to develop on react-typeahead.  [Installing npm][4].\n\nOnce that's done, to get started, run `npm install` in your checkout directory.\nThis will install all the local development dependences, such as `gulp` and `mocha`\n\n### Testing\n\nreact-typeahead uses mocha for unit tests and gulp for running them.  Large changes should\ninclude unittests.\n\nAfter updating or creating new tests, run `npm run-script build-test` to regenerate the\ntest package.\n\nOnce that's done, running the tests is easy with `gulp`:\n\n```\n> gulp test\n[00:17:25] Using gulpfile ~/src/react-typeahead/gulpfile.js\n[00:17:25] Starting 'test'...\n\n\n  ․․․․․․․․․․․․․․․\n\n  15 passing (43ms)\n\n[00:17:25] Finished 'test' after 448 ms\n[00:17:25] Starting 'default'...\n[00:17:25] Finished 'default' after 6.23 μs\n```\n\n### Contributing\n\nBasically, fork the repository and send a pull request.  It can be difficult to review these, so\nhere are some general rules to follow for getting your PR accepted more quickly:\n\n- All new properties and exposed component function should be documented in the README.md\n- Break your changes into smaller, easy to understand commits.\n- Send separate PRs for each commit when possible.\n- Feel free to rebase, merge, and rewrite commits to make them more readible.\n- Add comments explaining anything that's not painfully obvious.\n- Add unittests for your change if possible.\n\n[reactecf]: https://facebook.github.io/react/tips/expose-component-functions.html\n",
  "readmeFilename": "README.md",
  "_id": "react-typeahead@1.1.4",
  "_shasum": "9811c854fc4631392e3d2b580c4cfffe0fd0fbcf",
  "_from": "../../../../../tmp/npm-12269-b19547b0/git-cache-75dda8447ef8/58f02e65cb40005e71b1d26f7a8b5f041fd4e011",
  "_resolved": "git+ssh://git@github.com:JimVanEeden/react-typeahead.git#58f02e65cb40005e71b1d26f7a8b5f041fd4e011"
}
